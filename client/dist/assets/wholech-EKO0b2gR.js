import"./_commonjsHelpers-CSPQI3rM.js";import{m as B}from"./mpegts-CHqqkE9D.js";document.addEventListener("DOMContentLoaded",async()=>{const g=document.getElementById("wrap"),c=document.getElementById("chlist"),m=c.children,L=document.getElementsByClassName("broadcast-wrap"),f=document.getElementsByClassName("broadcast-title"),y=document.getElementsByClassName("control"),h=document.getElementById("control"),u=document.getElementById("volumebutton"),w=document.getElementById("showsw"),S=document.getElementById("fsbutton"),N=()=>{let e=0,n=0,i=Array(f.length).fill(0);function a(){clearTimeout(e),clearTimeout(n),g.classList.remove("hide"),[...L].forEach(t=>{t.classList.remove("hide")}),[...y].forEach(t=>{t.classList.remove("hide")}),h.classList.remove("hide"),e=setTimeout(function(){g.classList.add("hide"),[...y].forEach(t=>{t.classList.add("hide")}),h.classList.add("hide"),!w.checked&&(n=setTimeout(function(){[...L].forEach(t=>{t.classList.add("hide")})},3e3))},3e3)}let p=null;function d(t){t!=p&&(p!=null&&f[p].classList.remove("expand"),p=t),clearTimeout(i[t]),f[t].classList.add("expand"),i[t]=setTimeout(function(){f[t].classList.remove("expand")},6e3)}window.addEventListener("pointerdown",a),window.addEventListener("pointermove",a),window.addEventListener("scroll",a),w.addEventListener("change",a),[...m].forEach((t,l)=>{t.addEventListener("touchstart",()=>d(l)),t.addEventListener("pointermove",()=>d(l)),t.addEventListener("mouseleave",function(){f[l].classList.remove("expand")})}),window.addEventListener("keydown",function(t){const l=t.key;function o(){r(0)}switch(a(),l){case"A":case"a":u.click(),a();break;case"F":case"f":S.click(),a();break;case"ArrowUp":!isNaN(s)&&s!==null?s-3>=0&&r(s-3):o(),d(s);break;case"ArrowLeft":!isNaN(s)&&s!==null?s-1>=0&&r(s-1):o(),d(s);break;case"ArrowRight":!isNaN(s)&&s!==null?s+1<m.length&&r(s+1):o(),d(s);break;case"ArrowDown":!isNaN(s)&&s!==null?s+3<m.length&&r(s+3):o(),d(s);break}}),u.addEventListener("click",function(){r(s!=="all"?"all":null)}),window.addEventListener("scroll",function(){function t(){const l=window.document.body,o=window.document.documentElement,b=l.scrollTop||o.scrollTop;return o.scrollHeight-window.innerHeight-b}t()<=10?h.classList.add("slide"):h.classList.remove("slide")}),a()},T=async()=>{_=await fetch("/api/channels").then(e=>(e.status!==200&&console.log("error or no content",e.status),e.json())).catch(e=>(console.error("Failed to load",e),null))},I=()=>_.GR,k=()=>I().filter(e=>e.is_display===!0);let _;await T();const v=e=>new Date(e).toLocaleTimeString([],{hour:"2-digit",minute:"2-digit"}),r=e=>{switch(e){case null:c.classList.remove("choiced"),[...m].forEach(n=>{n.classList.remove("listening");const i=n.querySelector("video");i.muted=!0}),u.innerHTML='<i class="material-icons">volume_off</i>',u.title="全ch聴く";break;case"all":c.classList.remove("choiced"),[...m].forEach(n=>{n.classList.add("listening");const i=n.querySelector("video");i.muted=!1}),u.innerHTML='<i class="material-icons">volume_up</i>',u.title="ミュートする";break;default:c.classList.add("choiced"),[...m].forEach((n,i)=>{const a=n.querySelector("video");i===e?(n.classList.add("listening"),a.muted=!1):(n.classList.remove("listening"),a.muted=!0)}),u.innerHTML='<i class="material-icons">volume_up</i>',u.title="全ch聴く";break}s=e};let s=null,E=Promise.resolve();k().forEach((e,n)=>{const i=`<div class="chframe">
            <video playsinline controlsList="noremoteplayback"></video>
            <div class="broadcast-wrap">
                <div class="broadcast-channel-box">
                    <span class="broadcast-channel">${e.remocon_id}</span>
                    <img class="broadcast-logo" src="/api/channels/${e.id}/logo" alt="${e.name}">
                </div>
                <div class="broadcast-title">
                    <span class="broadcast-title-id">${e.program_present.title}</span>
                    <div class="broadcast-time">
                        <span class="broadcast-start">${v(e.program_present.start_time)}</span>
                        <span class="broadcast-to">～</span>
                        <span class="broadcast-end">${v(e.program_present.end_time)}</span>
                    </div>
                </div>
            </div>
            <div class="control">
                <button type="button" class="reload" title="再読み込み"><i class="material-icons">refresh</i></button>
            </div>
        </div>
        `;c.insertAdjacentHTML("beforeend",i);const a=c.lastElementChild,p=a.querySelector("video"),d=a.querySelector(".reload");a.addEventListener("click",function(){r(s===n?null:n)}),E=E.then(()=>new Promise(t=>{if(B.getFeatureList().mseLivePlayback){const l=`/api/streams/live/${e.display_channel_id}/360p/mpegts`,o=B.createPlayer({type:"mse",isLive:!0,url:l});o.attachMediaElement(p),d.addEventListener("click",b=>{b.stopPropagation(),o.unload(),b.shiftKey?alert("Shiftキーを押しながらクリックしたため、読み込み停止をしました。"):(o.load(),o.play())}),setTimeout(t,500),o.load(),o.play().then(function(){r("all")}).catch(function(){o.muted=!0,o.play()})}}))}),N(),await E,setInterval(async()=>{await T(),k().forEach((e,n)=>{const i=f[n],a={title:i.querySelector(".broadcast-title-id"),startTime:i.querySelector(".broadcast-start"),endTime:i.querySelector(".broadcast-end")},p=Object.values(a).map(l=>l.textContent),d=[e.program_present.title,v(e.program_present.start_time),v(e.program_present.end_time)];if(p.toString()!==d.toString()){const l=`<span class="broadcast-title-id">${e.program_present.title}</span>
                    <div class="broadcast-time">
                        <span class="broadcast-start">${v(e.program_present.start_time)}</span>
                        <span class="broadcast-to">～</span>
                        <span class="broadcast-end">${v(e.program_present.end_time)}</span>
                    </div>
                </div>`;i.innerHTML=l}})},30*1e3)});document.addEventListener("DOMContentLoaded",()=>{const g=document.documentElement,c=document.getElementById("fsbutton");c.addEventListener("click",()=>{document.fullscreenElement?document.exitFullscreen():g.requestFullscreen().catch(L=>{alert("ご利用のブラウザは全画面表示に対応していません"+L.name)})});const m=()=>{document.fullscreenElement?(screen.orientation.lock("landscape").catch(()=>{}),c.innerHTML='<i class="material-icons">fullscreen_exit</i>',c.title="全画面表示を終了"):(screen.orientation.unlock&&screen.orientation.unlock(),c.innerHTML='<i class="material-icons">fullscreen</i>',c.title="全画面表示")};document.addEventListener("fullscreenchange",m)});
